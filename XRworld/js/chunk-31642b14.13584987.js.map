{"version":3,"sources":["webpack:///./src/views/shaderDemo2.vue?b960","webpack:///./src/shader/spheres.vert","webpack:///./src/views/shaderDemo2.vue","webpack:///./src/components/sphereShader.vue","webpack:///./src/components/sphereShader.vue?901d","webpack:///./src/views/shaderDemo2.vue?6e3c","webpack:///./src/shader/spheres.frag"],"names":["module","exports","id","style","setup","shaderScene","loadingInstance","service","fullscreen","camera","position","set","axesHelper","sphereShaders","then","close","SceneDestory","console","log","loadTexture_Y","shape","geometry","createSphere","mat","setRawShaderMaterial","uniforms","shapetex","value","vertexShader","fragmentShader","wireframe","sphere","createMesh","scene","add","__exports__","name","components","shaderScene2","render"],"mappings":"kHAAA,W,8CCAAA,EAAOC,QAAU,u4C,qKCCf,gCAIM,YAFF,yBAAgB,K,OCFfC,GAAG,QAAQC,MAAA,8B,wDAAhB,gCAAwD,MAAxD,G,0GAYa,GACbC,MADa,WAEX,IAAIC,EACAC,EAEJ,iBAAU,WACRA,EAAkB,OAAUC,QAAQ,CAAEC,YAAY,IAClDH,EAAc,IAAI,OAAS,SAC3BA,EAAYI,OAAOC,SAASC,IAAI,IAAK,IAAK,KAC1CN,EAAYO,aAEZC,IAAgBC,MAAK,WACnBR,EAAgBS,cAIpB,iBAAgB,WACdV,EAAYW,eACZC,QAAQC,IAAI,WAGd,IAAML,EAAY,yDAAI,0HACAR,EAAYc,cAAc,4BAD1B,OACdC,EADc,OAGdC,EAAWhB,EAAYiB,aAAa,GAAG,IAAI,KAE3CC,EAAMlB,EAAYmB,qBAAqB,CAC3CC,SAAU,CACRC,SAAU,CACRC,MAAOP,IAGXQ,aAAc,IACdC,eAAgB,IAChBC,WAAU,IAGNC,EAAS1B,EAAY2B,WAAWX,EAAUE,GAChDlB,EAAY4B,MAAMC,IAAIH,GAjBF,2CAAJ,uD,qBC7BtB,MAAMI,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS,KAErD,QFIA,GACbC,KAAM,cACNC,WAAY,CACVC,aAAA,I,UGPJ,MAAM,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,gB,mBCTfvC,EAAOC,QAAU","file":"js/chunk-31642b14.13584987.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--1-1!./shaderDemo2.vue?vue&type=style&index=0&id=487f2096&scoped=true&lang=css\"","module.exports = \"uniform mat4 projectionMatrix;\\r\\nuniform mat4 modelViewMatrix;\\r\\nattribute vec3 position;\\r\\nattribute vec2 uv;\\r\\n\\r\\nuniform sampler2D shapetex;\\r\\n\\r\\nvarying vec2 vUV;\\r\\n\\r\\n//获取向量点到球中心的长度\\r\\nfloat glenth(vec3 p){\\r\\n    return sqrt(p.x*p.x+p.y*p.y+p.z*p.z);\\r\\n}\\r\\n\\r\\nvec3 setScale(vec3 p,float lenths){\\r\\n    \\r\\n    vec3 c_position=p;\\r\\n    \\r\\n    float scale=lenths/glenth(c_position);\\r\\n    c_position.x*=scale;\\r\\n    c_position.y*=scale;\\r\\n    c_position.z*=scale;\\r\\n    return c_position;\\r\\n}\\r\\n\\r\\nvec3 getMax(vec3 p1,vec3 p2){\\r\\n    vec3 m_position=p1;\\r\\n    if(0.<=m_position.x){\\r\\n        m_position.x=max(p1.x,p2.x);\\r\\n    }else{\\r\\n        m_position.x=min(p1.x,p2.x);\\r\\n    }\\r\\n    if(0.<=m_position.y){\\r\\n        m_position.y=max(p1.y,p2.y);\\r\\n    }else{\\r\\n        m_position.y=min(p1.y,p2.y);\\r\\n    }\\r\\n    if(0.<=m_position.z){\\r\\n        m_position.z=max(p1.z,p2.z);\\r\\n    }else{\\r\\n        m_position.z=min(p1.z,p2.z);\\r\\n    }\\r\\n    return m_position;\\r\\n}\\r\\n\\r\\nvoid main(){\\r\\n    vUV=uv;\\r\\n    vec4 v_height=texture2D(shapetex,uv);\\r\\n    \\r\\n    // float hg=v_height.r;\\r\\n    vec3 position2=setScale(position,v_height.r*100.);\\r\\n    \\r\\n    // gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\\r\\n    vec3 position_m=getMax(position,position2);\\r\\n    \\r\\n    gl_Position=projectionMatrix*modelViewMatrix*vec4(position_m,1.);\\r\\n    \\r\\n}\"","<template>\r\n  <div>\r\n    <!-- <keep-alive> -->\r\n      <shaderScene2 />\r\n    <!-- </keep-alive> -->\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport shaderScene2 from \"@/components/sphereShader.vue\";\r\nexport default {\r\n  name: \"shaderDemo2\",\r\n  components: {\r\n    shaderScene2,\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ndiv {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>","<template>\r\n  <div id=\"WebGL\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport { onBeforeUnmount, onMounted } from \"@vue/runtime-core\";\r\nimport VueScene from \"../script/View3D\";\r\nimport { ElLoading } from \"element-plus\";\r\n\r\nimport spherefrag from \"../shader/spheres.frag\";\r\nimport spherevert from \"../shader/spheres.vert\";\r\n\r\nexport default {\r\n  setup() {\r\n    let shaderScene;\r\n    let loadingInstance;\r\n\r\n    onMounted(() => {\r\n      loadingInstance = ElLoading.service({ fullscreen: true });\r\n      shaderScene = new VueScene(\"WebGL\");\r\n      shaderScene.camera.position.set(100, 100, 100);\r\n      shaderScene.axesHelper();\r\n\r\n      sphereShaders().then(() => {\r\n        loadingInstance.close();\r\n      });\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      shaderScene.SceneDestory();\r\n      console.log(\"场景销毁\");\r\n    });\r\n\r\n    const sphereShaders = async () => {\r\n      const shape = await shaderScene.loadTexture_Y(\"./shaderResources/mi.png\");\r\n\r\n      const geometry = shaderScene.createSphere(50,128,128);\r\n\r\n      const mat = shaderScene.setRawShaderMaterial({\r\n        uniforms: {\r\n          shapetex: {\r\n            value: shape,\r\n          },\r\n        },\r\n        vertexShader: spherevert,\r\n        fragmentShader: spherefrag,\r\n        wireframe:true\r\n      });\r\n\r\n      const sphere = shaderScene.createMesh(geometry, mat);\r\n      shaderScene.scene.add(sphere);\r\n    };\r\n  },\r\n};\r\n</script>","import { render } from \"./sphereShader.vue?vue&type=template&id=bb23902c\"\nimport script from \"./sphereShader.vue?vue&type=script&lang=js\"\nexport * from \"./sphereShader.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"F:\\\\项目外包\\\\yuan-universe\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./shaderDemo2.vue?vue&type=template&id=487f2096&scoped=true\"\nimport script from \"./shaderDemo2.vue?vue&type=script&lang=js\"\nexport * from \"./shaderDemo2.vue?vue&type=script&lang=js\"\n\nimport \"./shaderDemo2.vue?vue&type=style&index=0&id=487f2096&scoped=true&lang=css\"\n\nimport exportComponent from \"F:\\\\项目外包\\\\yuan-universe\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-487f2096\"]])\n\nexport default __exports__","module.exports = \"precision mediump float;\\r\\n\\r\\nvarying vec2 vUV;\\r\\nuniform sampler2D shapetex;\\r\\n\\r\\nfloat pi=3.1415926;\\r\\n\\r\\nvec4 colorChange(float x,float y){\\r\\n    \\r\\n    x=cos(x*pi)*.5;\\r\\n    y=cos(y*pi)*.5;\\r\\n    vec4 colors=vec4(.5*x*y*255.,1.*255.*x,1.*x*255.,1.);  \\r\\n    return colors;\\r\\n}\\r\\n\\r\\nvoid main(){\\r\\n    \\r\\n    vec4 color_1=colorChange(vUV.x,vUV.y);\\r\\n    \\r\\n    vec4 texs=texture2D(shapetex,vUV);\\r\\n    vec4 v_colors=vec4(texs.r,texs.g,texs.b,1);\\r\\n    \\r\\n    gl_FragColor=color_1;\\r\\n    \\r\\n}\""],"sourceRoot":""}